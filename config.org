#+title: jeri's emacs config as a literate program

* Introduction
TODO Transclude README.md

** Boilerplate to ensure .el files have proper headers.
#+name: elisp-header
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-early-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle pre-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC


* minimal-emacs.d suggested configurations
** [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-ui-pre-early-initel][Customizations: UI (pre-early-init.el)]]

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#how-to-enable-the-menu-bar-the-tool-bar-dialogs-the-contextual-menu-and-tooltips][Enable menu bar]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ; Enable the menu-bar, the tool-bar, dialogs, the contextual menu, and tooltips
  (setq minimal-emacs-ui-features '(context-menu tool-bar menu-bar dialogs tooltips))

#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#reducing-clutter-in-emacsd-by-redirecting-files-to-emacsdvar][Direct runtime config files to ~/.emacs.d/var/]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ; Reducing clutter in ~/.emacs.d by redirecting files to ~/.emacs.d/var/
  (setq user-emacs-directory (expand-file-name "var/" minimal-emacs-user-directory))
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
#+END_SRC


** [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-packages-post-initel][Customizations: Packages (post-init.el)]]

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#optimization-native-compilation][Assist native compilation with compile-angel]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Native compilation enhances Emacs performance by converting Elisp code into
  ;; native machine code, resulting in faster execution and improved
  ;; responsiveness.
  ;;
  ;; Ensure adding the following compile-angel code at the very beginning
  ;; of your `~/.emacs.d/post-init.el` file, before all other packages.
  (use-package compile-angel
  :demand t
  :ensure t
  :custom
  ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
  ;; Drawback: The minibuffer will not display compile-angel's actions.
  (compile-angel-verbose t)

  :config
  ;; The following directive prevents compile-angel from compiling your init
  ;; files. If you choose to remove this push to `compile-angel-excluded-files'
  ;; and compile your pre/post-init files, ensure you understand the
  ;; implications and thoroughly test your code. For example, if you're using
  ;; the `use-package' macro, you'll need to explicitly add:
  ;; (eval-when-compile (require 'use-package))
  ;; at the top of your init file.
  (push "/init.el" compile-angel-excluded-files)
  (push "/early-init.el" compile-angel-excluded-files)
  (push "/pre-init.el" compile-angel-excluded-files)
  (push "/post-init.el" compile-angel-excluded-files)
  (push "/pre-early-init.el" compile-angel-excluded-files)
  (push "/post-early-init.el" compile-angel-excluded-files)

  ;; A local mode that compiles .el files whenever the user saves them.
  ;; (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode)

  ;; A global mode that compiles .el files prior to loading them via `load' or
  ;; `require'. Additionally, it compiles all packages that were loaded before
  ;; the mode `compile-angel-on-load-mode' was activated.
  (compile-angel-on-load-mode 1))

#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#optimization-native-compilation][Autorevert, recent files, minibuffer history ]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(use-package autorevert
  :ensure nil
  :commands (auto-revert-mode global-auto-revert-mode)
  :hook
  (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-remote-files nil)
  (auto-revert-use-notify t)
  (auto-revert-avoid-polling nil)
  (auto-revert-verbose t))

;; Recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(use-package recentf
  :ensure nil
  :commands (recentf-mode recentf-cleanup)
  :hook
  (after-init . recentf-mode)

  :custom
  (recentf-auto-cleanup (if (daemonp) 300 'never))
  (recentf-exclude
   (list "\\.tar$" "\\.tbz2$" "\\.tbz$" "\\.tgz$" "\\.bz2$"
         "\\.bz$" "\\.gz$" "\\.gzip$" "\\.xz$" "\\.zip$"
         "\\.7z$" "\\.rar$"
         "COMMIT_EDITMSG\\'"
         "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
         "-autoloads\\.el$" "autoload\\.el$"))

  :config
  ;; A cleanup depth of -90 ensures that `recentf-cleanup' runs before
  ;; `recentf-save-list', allowing stale entries to be removed before the list
  ;; is saved by `recentf-save-list', which is automatically added to
  ;; `kill-emacs-hook' by `recentf-mode'.
  (add-hook 'kill-emacs-hook #'recentf-cleanup -90))

;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(use-package savehist
  :ensure nil
  :commands (savehist-mode savehist-save)
  :hook
  (after-init . savehist-mode)
  :custom
  (savehist-autosave-interval 600)
  (savehist-additional-variables
   '(kill-ring                        ; clipboard
     register-alist                   ; macros
     mark-ring global-mark-ring       ; marks
     search-ring regexp-search-ring)))

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(use-package saveplace
  :ensure nil
  :commands (save-place-mode save-place-local-mode)
  :hook
  (after-init . save-place-mode)
  :custom
  (save-place-limit 400))
#+END_SRC

minimal-emacs.d suggests the default auto save mode functionality, but I grew to like the function implemented in Emacs Bedrock
[[https://codeberg.org/ashton314/emacs-bedrock/raw/branch/main/init.el][Autosave to common flat directory (Emacs Bedrock)]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Don't litter file system with *~ backup files; put them all inside
  ;; ~/.emacs.d/backup or wherever
  (defun bedrock--backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* ((backupRootDir (concat user-emacs-directory "emacs-backup/"))
           (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
           (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath))
  (setopt make-backup-file-name-function 'bedrock--backup-file-name)


  ;; The above creates nested directories in the backup folder. If
  ;; instead you would like all backup files in a flat structure, albeit
  ;; with their full paths concatenated into a filename, then you can
  ;; use the following configuration:
  ;; (Run `'M-x describe-variable RET backup-directory-alist RET' for more help)
  ;;
  (let ((backup-dir (expand-file-name "emacs-backup/" user-emacs-directory)))
     (setopt backup-directory-alist `(("." . ,backup-dir))))

#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#configuring-elpaca-package-manager][Elpaca package maanger]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ;; By default, minimal-emacs-package-initialize-and-refresh is set to t, which
  ;; makes minimal-emacs.d call the built-in package manager. Since Elpaca will
  ;; replace the package manager, there is no need to call it.
  (setq minimal-emacs-package-initialize-and-refresh nil)

#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle pre-init.el
  ;; Elpaca bootstrap
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Optional: Install use-package support
  ;; If you enable elpaca-use-package, some use-package definitions, such as
  ;; Vertico's, may need modifications. See the following discussion for details:
  ;; https://github.com/jamescherti/minimal-emacs.d/issues/54
  ;;
  (elpaca elpaca-use-package
  (elpaca-use-package-mode))

#+END_SRC

minimal-emacs.d suggested to use the Corfu, Cape, Vertico, Consult, and Embark stack, but I'd prefer a more out of the box experience offered by lsp-bridge for autocompletion
[[https://github.com/manateelazycat/lsp-bridge?tab=readme-ov-file][lsp-bridge + yasnippet]]

#+BEGIN_SRC emacs-lisp :tangle post-init.el
;; The official collection of snippets for yasnippet.
(use-package yasnippet-snippets
  :ensure t
  :after yasnippet)

;; YASnippet is a template system designed that enhances text editing by
;; enabling users to define and use snippets. When a user types a short
;; abbreviation, YASnippet automatically expands it into a full template, which
;; can include placeholders, fields, and dynamic content.
(use-package yasnippet
  :ensure t
  :commands (yas-minor-mode
             yas-global-mode)

  :hook
  (after-init . yas-global-mode)

  :custom
  (yas-also-auto-indent-first-line t)  ; Indent first line of snippet
  (yas-also-indent-empty-lines t)
  (yas-snippet-revival nil)  ; Setting this to t causes issues with undo
  (yas-wrap-around-region nil) ; Do not wrap region when expanding snippets
  ;; (yas-triggers-in-field nil)  ; Disable nested snippet expansion
  (yas-indent-line 'fixed) ; Do not auto-indent snippet content
  ;; (yas-prompt-functions '(yas-no-prompt))  ; No prompt for snippet choices

  :init
  ;; Suppress verbose messages
  (setq yas-verbosity 0))

       (use-package lsp-bridge
         :ensure (lsp-bridge
                      :host github
                      :repo "manateelazycat/lsp-bridge"
                      :files ("*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources"))
                      :init
                      (global-lsp-bridge-mode))
        (unless (display-graphic-p)
          (use-package popon :ensure
            (popon :host nil :repo "https://codeberg.org/akib/emacs-popon.git"))
          (use-package acm-terminal :ensure
            (acm-terminal :host github :repo "twlz0ne/acm-terminal")))
#+END_SRC


[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#configuring-vertico-consult-and-embark][Vertico, Consult, Embark]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
;; Vertico provides a vertical completion interface, making it easier to
;; navigate and select from completion candidates (e.g., when `M-x` is pressed).
(use-package vertico
  ;; (Note: It is recommended to also enable the savehist package.)
  :ensure t
  :config
  (vertico-mode))

;; Vertico leverages Orderless' flexible matching capabilities, allowing users
;; to input multiple patterns separated by spaces, which Orderless then
;; matches in any order against the candidates.
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless flex))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

;; Marginalia allows Embark to offer you preconfigured actions in more contexts.
;; In addition to that, Marginalia also enhances Vertico by adding rich
;; annotations to the completion candidates displayed in Vertico's interface.
(use-package marginalia
  :ensure t
  :commands (marginalia-mode marginalia-cycle)
  :init (marginalia-mode))

;; Embark integrates with Consult and Vertico to provide context-sensitive
;; actions and quick access to commands based on the current selection, further
;; improving user efficiency and workflow within Emacs. Together, they create a
;; cohesive and powerful environment for managing completions and interactions.
(use-package embark
  ;; Embark is an Emacs package that acts like a context menu, allowing
  ;; users to perform context-sensitive actions on selected items
  ;; directly from the completion interface.
  :ensure t
  :commands (embark-act
             embark-dwim
             embark-export
             embark-collect
             embark-bindings
             embark-prefix-help-command)
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

;; Consult offers a suite of commands for efficient searching, previewing, and
;; interacting with buffers, file contents, and more, improving various tasks.
(use-package consult
  :ensure t
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x t b" . consult-buffer-other-tab)
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)
         ("M-s e" . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))

  ;; Enable automatic preview at point in the *Completions* buffer.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  :init
  ;; Optionally configure the register formatting. This improves the register
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Aggressive asynchronous that yield instantaneous results. (suitable for
  ;; high-performance systems.) Note: Minad, the author of Consult, does not
  ;; recommend aggressive values.
  ;; Read: https://github.com/minad/consult/discussions/951
  ;;
  ;; However, the author of minimal-emacs.d uses these parameters to achieve
  ;; immediate feedback from Consult.
  ;; (setq consult-async-input-debounce 0.02
  ;;       consult-async-input-throttle 0.05
  ;;       consult-async-refresh-delay 0.02)

  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))
   (setq consult-narrow-key "<"))
#+END_SRC
[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#code-folding][Outline-Indent based code folding]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
;; The outline-indent Emacs package provides a minor mode that enables code
;; folding based on indentation levels.
;;
;; In addition to code folding, *outline-indent* allows:
;; - Moving indented blocks up and down
;; - Indenting/unindenting to adjust indentation levels
;; - Inserting a new line with the same indentation level as the current line
;; - Move backward/forward to the indentation level of the current line
;; - and other features.
(use-package outline-indent
  :ensure t
  :commands outline-indent-minor-mode

  :custom
  (outline-indent-ellipsis " ▼")

  :init
  ;; The minor mode can also be automatically activated for a certain modes.
  (add-hook 'python-mode-hook #'outline-indent-minor-mode)
  (add-hook 'python-ts-mode-hook #'outline-indent-minor-mode)

  (add-hook 'yaml-mode-hook #'outline-indent-minor-mode)
  (add-hook 'yaml-ts-mode-hook #'outline-indent-minor-mode))
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#changing-the-default-theme][Theme: modus-operandi]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  (mapc #'disable-theme custom-enabled-themes)  ; Disable all active themesOA
  (load-theme 'modus-vivendi-deuteranopia t)  ; Load the built-in theme
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#automatic-removal-of-trailing-whitespace-on-save][Strip trailing whitespace]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
;; The stripspace Emacs package provides stripspace-local-mode, a minor mode
;; that automatically removes trailing whitespace and blank lines at the end of
;; the buffer when saving.
(use-package stripspace
  :ensure t
  :commands stripspace-local-mode

  ;; Enable for prog-mode-hook, text-mode-hook, conf-mode-hook
  :hook ((prog-mode . stripspace-local-mode)
         (text-mode . stripspace-local-mode)
         (conf-mode . stripspace-local-mode))

  :custom
  ;; The `stripspace-only-if-initially-clean' option:
  ;; - nil to always delete trailing whitespace.
  ;; - Non-nil to only delete whitespace when the buffer is clean initially.
  ;; (The initial cleanliness check is performed when `stripspace-local-mode'
  ;; is enabled.)
  (stripspace-only-if-initially-clean nil)

  ;; Enabling `stripspace-restore-column' preserves the cursor's column position
  ;; even after stripping spaces. This is useful in scenarios where you add
  ;; extra spaces and then save the file. Although the spaces are removed in the
  ;; saved file, the cursor remains in the same position, ensuring a consistent
  ;; editing experience without affecting cursor placement.
  (stripspace-restore-column t))
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#enhancing-undoredo][Undo-fu: one button redo]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; The undo-fu package is a lightweight wrapper around Emacs' built-in undo
  ;; system, providing more convenient undo/redo functionality.
  (use-package undo-fu
  :ensure t
  :commands (undo-fu-only-undo
             undo-fu-only-redo
             undo-fu-only-redo-all
             undo-fu-disable-checkpoint)
  :config (global-unset-key (kbd "C-z"))
          (global-set-key (kbd "C-z") 'undo-fu-only-undo)
          (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))

  ;; The undo-fu-session package complements undo-fu by enabling the saving
  ;; and restoration of undo history across Emacs sessions, even after restarting.
  (use-package undo-fu-session
      :ensure t
      :commands undo-fu-session-global-mode
      :hook (after-init . undo-fu-session-global-mode))
#+END_SRC

[[https://github.com/meow-edit/meow][Meow: modal editing]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  (use-package meow
        :ensure t
        :config
            (defun meow-setup ()
              (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
              (meow-motion-define-key
               '("j" . meow-next)
               '("k" . meow-prev)
               '("<escape>" . ignore))
              (meow-leader-define-key
               ;; Use SPC (0-9) for digit arguments.
               '("1" . meow-digit-argument)
               '("2" . meow-digit-argument)
               '("3" . meow-digit-argument)
               '("4" . meow-digit-argument)
               '("5" . meow-digit-argument)
               '("6" . meow-digit-argument)
               '("7" . meow-digit-argument)
               '("8" . meow-digit-argument)
               '("9" . meow-digit-argument)
               '("0" . meow-digit-argument)
               '("/" . meow-keypad-describe-key)
               '("?" . meow-cheatsheet))
              (meow-normal-define-key
               '("0" . meow-expand-0)
               '("9" . meow-expand-9)
               '("8" . meow-expand-8)
               '("7" . meow-expand-7)
               '("6" . meow-expand-6)
               '("5" . meow-expand-5)
               '("4" . meow-expand-4)
               '("3" . meow-expand-3)
               '("2" . meow-expand-2)
               '("1" . meow-expand-1)
               '("-" . negative-argument)
               '(";" . meow-reverse)
               '("," . meow-inner-of-thing)
               '("." . meow-bounds-of-thing)
               '("[" . meow-beginning-of-thing)
               '("]" . meow-end-of-thing)
               '("a" . meow-append)
               '("A" . meow-open-below)
               '("b" . meow-back-word)
               '("B" . meow-back-symbol)
               '("c" . meow-change)
               '("d" . meow-delete)
               '("D" . meow-backward-delete)
               '("e" . meow-next-word)
               '("E" . meow-next-symbol)
               '("f" . meow-find)
               '("g" . meow-cancel-selection)
               '("G" . meow-grab)
               '("h" . meow-left)
               '("H" . meow-left-expand)
               '("i" . meow-insert)
               '("I" . meow-open-above)
               '("j" . meow-next)
               '("J" . meow-next-expand)
               '("k" . meow-prev)
               '("K" . meow-prev-expand)
               '("l" . meow-right)
               '("L" . meow-right-expand)
               '("m" . meow-join)
               '("n" . meow-search)
               '("o" . meow-block)
               '("O" . meow-to-block)
               '("p" . meow-yank)
               '("q" . meow-quit)
               '("Q" . meow-goto-line)
               '("r" . meow-replace)
               '("R" . meow-swap-grab)
               '("s" . meow-kill)
               '("t" . meow-till)
               '("u" . meow-undo)
               '("U" . meow-undo-in-selection)
               '("v" . meow-visit)
               '("w" . meow-mark-word)
               '("W" . meow-mark-symbol)
               '("x" . meow-line)
               '("X" . meow-goto-line)
               '("y" . meow-save)
               '("Y" . meow-sync-grab)
               '("z" . meow-pop-selection)
               '("'" . repeat)
               '("<escape>" . ignore)))
        (meow-setup)
        (meow-global-mode 1))
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#configuring-org-mode][Org mode config]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Org mode is a major mode designed for organizing notes, planning, task
  ;; management, and authoring documents using plain text with a simple and
  ;; expressive markup syntax. It supports hierarchical outlines, TODO lists,
  ;; scheduling, deadlines, time tracking, and exporting to multiple formats
  ;; including HTML, LaTeX, PDF, and Markdown.
  (use-package org
      :ensure t
      :commands (org-mode org-version)
      :mode
      ("\\.org\\'" . org-mode)
      :custom
       (org-hide-leading-stars t)
       (org-startup-indented t)
       (org-adapt-indentation nil)
       (org-edit-src-content-indentation 0)
       ;; (org-fontify-done-headline t)
       ;; (org-fontify-todo-headline t)
       ;; (org-fontify-whole-heading-line t)
       ;; (org-fontify-quote-and-verse-blocks t)
       (org-startup-truncated t))
#+END_SRC
[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#configuring-markdown-mode-eg-readmemd-syntax][Markdown Mode]]

#+BEGIN_SRC emacs-lisp :tangle post-init.el
    ;; The markdown-mode package provides a major mode for Emacs for syntax
    ;; highlighting, editing commands, and preview support for Markdown documents.
    ;; It supports core Markdown syntax as well as extensions like GitHub Flavored
    ;; Markdown (GFM).
    (use-package markdown-mode
        :commands (gfm-mode
                   gfm-view-mode
                   markdown-mode
                   markdown-view-mode)
        :mode (("\\.markdown\\'" . markdown-mode)
              ("\\.md\\'" . markdown-mode)
              ("README\\.md\\'" . gfm-mode))
        :bind (:map markdown-mode-map
              ("C-c C-e" . markdown-do)))

  ;; Automatically generate a table of contents when editing Markdown files
  (use-package markdown-toc
      :ensure t
      :commands
      (markdown-toc-generate-toc
      markdown-toc-generate-or-refresh-toc
      markdown-toc-delete-toc
      markdown-toc--toc-already-present-p)
      :custom
      (markdown-toc-header-toc-title "**Table of Contents**"))
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#tree-sitter-integration-better-syntax-highlighting][treesitter]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Tree-sitter in Emacs is an incremental parsing system introduced in Emacs 29
  ;; that provides precise, high-performance syntax highlighting. It supports a
  ;; broad set of programming languages, including Bash, C, C++, C#, CMake, CSS,
  ;; Dockerfile, Go, Java, JavaScript, JSON, Python, Rust, TOML, TypeScript, YAML,
  ;; Elisp, Lua, Markdown, and many others.
  (use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#safely-terminating-unused-buffers][Terminate unused buffers]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  (use-package buffer-terminator
      :ensure t
      :custom
      ;; Enable/Disable verbose mode to log buffer cleanup events
      (buffer-terminator-verbose nil)

      ;; Set the inactivity timeout (in seconds) after which buffers are considered
      ;; inactive (default is 30 minutes):
      (buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes

      ;; Define how frequently the cleanup process should run (default is every 10
      ;; minutes):
      (buffer-terminator-interval (* 10 60)) ; 10 minutes
      :config
      (buffer-terminator-mode 1))

#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#treemacs-a-tree-layout-file-explorer-sidebar-file-explorer][treemacs]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
;; A file and project explorer for Emacs that displays a structured tree
;; layout, similar to file browsers in modern IDEs. It functions as a sidebar
;; in the left window, providing a persistent view of files, projects, and
;; other elsure t
  :commands (treemacs
             treemacs-select-window
             treemacs-delete-other-windows
             treemacs-select-directory
             treemacs-bookmark
             treemacs-find-file
             treemacs-find-tag)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))

  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))

  :config
  (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
        treemacs-deferred-git-apply-delay        0.5
        treemacs-directory-name-transformer      #'identity
        treemacs-display-in-side-window          t
        treemacs-eldoc-display                   'simple
        treemacs-file-event-delay                2000
        treemacs-file-extension-regex            treemacs-last-period-regex-value
        treemacs-file-follow-delay               0.2
        treemacs-file-name-transformer           #'identity
        treemacs-follow-after-init               t
        treemacs-expand-after-init               t
        treemacs-find-workspace-method           'find-for-file-or-pick-first
        treemacs-git-command-pipe                ""
        treemacs-goto-tag-strategy               'refetch-index
        treemacs-header-scroll-indicators        '(nil . "^^^^^^")
        treemacs-hide-dot-git-directory          t
        treemacs-indentation                     2
        treemacs-indentation-string              " "
        treemacs-is-never-other-window           nil
        treemacs-max-git-entries                 5000
        treemacs-missing-project-action          'ask
        treemacs-move-files-by-mouse-dragging    t
        treemacs-move-forward-on-expand          nil
        treemacs-no-png-images                   nil
        treemacs-no-delete-other-windows         t
        treemacs-project-follow-cleanup          nil
        treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position                        'left
        treemacs-read-string-input               'from-child-frame
        treemacs-recenter-distance               0.1
        treemacs-recenter-after-file-follow      nil
        treemacs-recenter-after-tag-follow       nil
        treemacs-recenter-after-project-jump     'always
        treemacs-recenter-after-project-expand   'on-distance
        treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
        treemacs-project-follow-into-home        nil
        treemacs-show-cursor                     nil
        treemacs-show-hidden-files               t
        treemacs-silent-filewatch                nil
        treemacs-silent-refresh                  nil
        treemacs-sorting                         'alphabetic-asc
        treemacs-select-when-already-in-treemacs 'move-back
        treemacs-space-between-root-nodes        t
        treemacs-tag-follow-cleanup              t
        treemacs-tag-follow-delay                1.5
        treemacs-text-scale                      nil
        treemacs-user-mode-line-format           nil
        treemacs-user-header-line-format         nil
        treemacs-wide-toggle-width               70
        treemacs-width                           35
        treemacs-width-increment                 1
        treemacs-width-is-initially-locked       t
        treemacs-workspace-switch-cleanup        nil)

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;; (treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)

  ;;(when treemacs-python-executable
  ;;  (treemacs-git-commit-diff-mode t))

  (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))

  (treemacs-hide-gitignored-files-mode nil))


#+END_SRC

* Web
[[https://github.com/fxbois/web-mode/tree/master][web-mode]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
      (use-package web-mode
      :ensure t
      :config
      (require 'web-mode)
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (defun my-web-mode-hook ()
        "Hooks for Web mode."
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-code-indent-offset 4)
        (setq web-mode-comment-style 2)
        (setq web-mode-enable-auto-pairing t)
        (setq web-mode-enable-css-colorization t)
        (setq web-mode-enable-block-face t)
        (setq web-mode-enable-part-face t)
        (setq web-mode-enable-comment-interpolation t)
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-engines-alist
          '(("astro"    . "\\.astro\\'")
            ("svelte"  . "\\.svelte\\.")))
        (add-hook 'local-write-file-hooks
                (lambda ()
                   (delete-trailing-whitespace)
                   nil)))
      (add-hook 'web-mode-hook  'my-web-mode-hook))

    (use-package svelte-mode :ensure t )
    (use-package astro-ts-mode :ensure t )

#+END_SRC

[[https://github.com/merrickluo/lsp-tailwindcss/tree/master][Tailwind-lsp]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
(use-package ensure: '(lsp-tailwindcss :host github :repo "merrickluo/lsp-tailwindcss"))
#+END_SRC

Since I use IHP / yesod / miso, haskell is part of my webdev workflow
[[https://github.com/haskell/haskell-mode/tree/bd89438b0e6e6b6877d635699e265da85e85ca06][haskell-mode]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  (use-package haskell-mode :ensure t )
#+END_SRC

Sorting CSS attributes as part of linting is nice
[[https://github.com/P233/postcss-sorting.el/tree/deb0c935d2904c11a965758a9aee5a0e905f21fc][postcss-sorting]]

* Data
#+BEGIN_SRC emacs-lisp :tangle post-init.el
# Edit
(use-package csv-mode :ensure t)
#+END_SRC
