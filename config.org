#+title: jeri's emacs config as a literate program

* Introduction
TODO Transclude README.md

** Boilerplate to ensure org files tangle correctly.
#+name: elisp-header
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-early-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle pre-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC


* minimal-emacs.d suggested configurations
** [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-ui-pre-early-initel][Customizations: UI (pre-early-init.el)]]

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#how-to-enable-the-menu-bar-the-tool-bar-dialogs-the-contextual-menu-and-tooltips][Enable menu bar]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ; Enable the menu-bar, the tool-bar, dialogs, the contextual menu, and tooltips
  (setq minimal-emacs-ui-features '(context-menu tool-bar menu-bar dialogs tooltips))

#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#reducing-clutter-in-emacsd-by-redirecting-files-to-emacsdvar][Direct runtime config files to ~/.emacs.d/var/]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ; Reducing clutter in ~/.emacs.d by redirecting files to ~/.emacs.d/var/
  (setq user-emacs-directory (expand-file-name "var/" minimal-emacs-user-directory))
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
#+END_SRC


** [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-packages-post-initel][Customizations: Packages (post-init.el)]]

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#optimization-native-compilation][Assist native compilation with compile-angel]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Native compilation enhances Emacs performance by converting Elisp code into
  ;; native machine code, resulting in faster execution and improved
  ;; responsiveness.
  ;;
  ;; Ensure adding the following compile-angel code at the very beginning
  ;; of your `~/.emacs.d/post-init.el` file, before all other packages.
  (use-package compile-angel
  :demand t
  :ensure t
  :custom
  ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
  ;; Drawback: The minibuffer will not display compile-angel's actions.
  (compile-angel-verbose t)

  :config
  ;; The following directive prevents compile-angel from compiling your init
  ;; files. If you choose to remove this push to `compile-angel-excluded-files'
  ;; and compile your pre/post-init files, ensure you understand the
  ;; implications and thoroughly test your code. For example, if you're using
  ;; the `use-package' macro, you'll need to explicitly add:
  ;; (eval-when-compile (require 'use-package))
  ;; at the top of your init file.
  (push "/init.el" compile-angel-excluded-files)
  (push "/early-init.el" compile-angel-excluded-files)
  (push "/pre-init.el" compile-angel-excluded-files)
  (push "/post-init.el" compile-angel-excluded-files)
  (push "/pre-early-init.el" compile-angel-excluded-files)
  (push "/post-early-init.el" compile-angel-excluded-files)

  ;; A local mode that compiles .el files whenever the user saves them.
  ;; (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode)

  ;; A global mode that compiles .el files prior to loading them via `load' or
  ;; `require'. Additionally, it compiles all packages that were loaded before
  ;; the mode `compile-angel-on-load-mode' was activated.
  (compile-angel-on-load-mode 1))
  
#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#optimization-native-compilation][Autorevert, recent files, minibuffer history ]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(use-package autorevert
  :ensure nil
  :commands (auto-revert-mode global-auto-revert-mode)
  :hook
  (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-remote-files nil)
  (auto-revert-use-notify t)
  (auto-revert-avoid-polling nil)
  (auto-revert-verbose t))

;; Recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(use-package recentf
  :ensure nil
  :commands (recentf-mode recentf-cleanup)
  :hook
  (after-init . recentf-mode)

  :custom
  (recentf-auto-cleanup (if (daemonp) 300 'never))
  (recentf-exclude
   (list "\\.tar$" "\\.tbz2$" "\\.tbz$" "\\.tgz$" "\\.bz2$"
         "\\.bz$" "\\.gz$" "\\.gzip$" "\\.xz$" "\\.zip$"
         "\\.7z$" "\\.rar$"
         "COMMIT_EDITMSG\\'"
         "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
         "-autoloads\\.el$" "autoload\\.el$"))

  :config
  ;; A cleanup depth of -90 ensures that `recentf-cleanup' runs before
  ;; `recentf-save-list', allowing stale entries to be removed before the list
  ;; is saved by `recentf-save-list', which is automatically added to
  ;; `kill-emacs-hook' by `recentf-mode'.
  (add-hook 'kill-emacs-hook #'recentf-cleanup -90))

;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(use-package savehist
  :ensure nil
  :commands (savehist-mode savehist-save)
  :hook
  (after-init . savehist-mode)
  :custom
  (savehist-autosave-interval 600)
  (savehist-additional-variables
   '(kill-ring                        ; clipboard
     register-alist                   ; macros
     mark-ring global-mark-ring       ; marks
     search-ring regexp-search-ring)))

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(use-package saveplace
  :ensure nil
  :commands (save-place-mode save-place-local-mode)
  :hook
  (after-init . save-place-mode)
  :custom
  (save-place-limit 400))
#+END_SRC

minimal-emacs.d suggests the default auto save mode functionality, but I grew to like the function implemented in Emacs Bedrock
[[https://codeberg.org/ashton314/emacs-bedrock/raw/branch/main/init.el][Autosave to common flat directory (Emacs Bedrock)]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Don't litter file system with *~ backup files; put them all inside
  ;; ~/.emacs.d/backup or wherever
  (defun bedrock--backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* ((backupRootDir (concat user-emacs-directory "emacs-backup/"))
           (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
           (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath))
  (setopt make-backup-file-name-function 'bedrock--backup-file-name)


  ;; The above creates nested directories in the backup folder. If
  ;; instead you would like all backup files in a flat structure, albeit
  ;; with their full paths concatenated into a filename, then you can
  ;; use the following configuration:
  ;; (Run `'M-x describe-variable RET backup-directory-alist RET' for more help)
  ;;
  (let ((backup-dir (expand-file-name "emacs-backup/" user-emacs-directory)))
     (setopt backup-directory-alist `(("." . ,backup-dir))))
  
#+END_SRC
