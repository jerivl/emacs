#+title: jeri's emacs config as a literate program

* Introduction
TODO Transclude README.md

** Boilerplate to ensure org files tangle correctly.
#+name: elisp-header
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-early-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle pre-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-init.el :noweb yes
<<elisp-header>>
(message "ok")
#+END_SRC


* minimal-emacs.d suggested configurations
** [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-ui-pre-early-initel][Customizations: UI (pre-early-init.el)]]

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#how-to-enable-the-menu-bar-the-tool-bar-dialogs-the-contextual-menu-and-tooltips][Enable menu bar]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ; Enable the menu-bar, the tool-bar, dialogs, the contextual menu, and tooltips
  (setq minimal-emacs-ui-features '(context-menu tool-bar menu-bar dialogs tooltips))

#+END_SRC

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#reducing-clutter-in-emacsd-by-redirecting-files-to-emacsdvar][Direct runtime config files to ~/.emacs.d/var/]]
#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ; Reducing clutter in ~/.emacs.d by redirecting files to ~/.emacs.d/var/
  (setq user-emacs-directory (expand-file-name "var/" minimal-emacs-user-directory))
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
#+END_SRC


** [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-packages-post-initel][Customizations: Packages (post-init.el)]]

[[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#optimization-native-compilation][Assist native compilation with compile-angel]]
#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;; Native compilation enhances Emacs performance by converting Elisp code into
  ;; native machine code, resulting in faster execution and improved
  ;; responsiveness.
  ;;
  ;; Ensure adding the following compile-angel code at the very beginning
  ;; of your `~/.emacs.d/post-init.el` file, before all other packages.
  (use-package compile-angel
  :demand t
  :ensure t
  :custom
  ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
  ;; Drawback: The minibuffer will not display compile-angel's actions.
  (compile-angel-verbose t)

  :config
  ;; The following directive prevents compile-angel from compiling your init
  ;; files. If you choose to remove this push to `compile-angel-excluded-files'
  ;; and compile your pre/post-init files, ensure you understand the
  ;; implications and thoroughly test your code. For example, if you're using
  ;; the `use-package' macro, you'll need to explicitly add:
  ;; (eval-when-compile (require 'use-package))
  ;; at the top of your init file.
  (push "/init.el" compile-angel-excluded-files)
  (push "/early-init.el" compile-angel-excluded-files)
  (push "/pre-init.el" compile-angel-excluded-files)
  (push "/post-init.el" compile-angel-excluded-files)
  (push "/pre-early-init.el" compile-angel-excluded-files)
  (push "/post-early-init.el" compile-angel-excluded-files)

  ;; A local mode that compiles .el files whenever the user saves them.
  ;; (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode)

  ;; A global mode that compiles .el files prior to loading them via `load' or
  ;; `require'. Additionally, it compiles all packages that were loaded before
  ;; the mode `compile-angel-on-load-mode' was activated.
  (compile-angel-on-load-mode 1))
  
#+END_SRC

